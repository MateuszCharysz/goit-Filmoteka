const e=(e,t)=>{let o=localStorage.getItem("user"),n={};o&&(n=JSON.parse(o)),n[t]||(n[t]=[]),n[t].includes(e)||n[t].push(e),localStorage.setItem("user",JSON.stringify(n))},t=e=>{const t=e.genres.map((e=>e.name)).join(", ");return`\n    <div class='modal'>\n        <button class='modal__button modal__button--close' id='modal__close'>\n        </button>\n        <img class="modal__img" src="https://image.tmdb.org/t/p/w500//${e.poster_path}" />\n        <div class="modal__content">\n            <h2 class="modal__title">${e.original_title}</h2>\n            <ul class="modal__list">\n                <li class="modal__item">\n                    <p class="modal__item--label">Vote / Votes</p>\n                    <div class="modal__item--vote">\n                        <p class="modal__item--value modal__item--value--vote">\n                            <vote_average>\n                                ${e.vote_average.toFixed(1)}\n                            </vote_average>\n                            /\n                            <vote__count>\n                                ${e.vote_count}\n                            </vote__count>\n                        </p>\n                    </div>\n                </li>\n                <li class="modal__item">\n                    <p class="modal__item--label">Popularity</p>\n                    <p class="modal__item--value">${e.popularity.toFixed(1)}</p>\n                </li>\n                <li class="modal__item">\n                    <p class="modal__item--label">Original Title</p>\n                    <p class="modal__item--value big">${e.original_title}</p>\n                </li>\n                <li class="modal__item">\n                    <p class="modal__item--label">Genre</p>\n                    <p class="modal__item--value">${t}</p>\n                </li>\n            </ul>\n            <div class="modal__overview">\n                <h3 class="modal__overview--about">ABOUT</h3>\n                <p class="modal__overview--overview">${e.overview}</p>\n            </div>\n        <div class="modal__buttons">\n            <button id="watched" class="modal__button modal__button--watched">Add to watched</button>\n            <button id="queue" class="modal__button modal__button--queue">Add to queue</button>\n        </div>\n    </div>\n    `},o=e=>fetch(`https://api.themoviedb.org/3/movie/${e}?api_key=64cb7e9375c055230d64b013c4bca79f&language=en-US`).then((e=>{if(!e.ok)throw 429===e.status?console.error("Error: Too many requests to API."):console.error("Error: Failed to fetch data from API. Status code:",e.status),new Error(e.status);return e.json()})).then((e=>e.genres)).catch((e=>{throw new Error(e)})),n=e=>fetch(`https://api.themoviedb.org/3/search/movie?api_key=64cb7e9375c055230d64b013c4bca79f&language=en-US&query=${e}&page=1&include_adult=false`).then((e=>e.ok?e.json():(429===e.status?console.error("Error: Too many requests to API."):console.error("Error: Failed to fetch data from API. Status code:",e.status),Promise.reject(new Error(e.status))))).then((e=>{const t=e.results.map((e=>e.id)).map((e=>o(e)));return Promise.all(t).then((t=>e.results.map(((e,o)=>({...e,genres:t[o]})))))})).catch((e=>(console.error(e),Promise.reject(new Error("An error occurred while fetching the data."))))),a=e=>e.map((e=>{const t=e.genres.map((e=>e.name)).join(", ");return`<div class="movie__card" data-id="${e.id}">\n            <img\n              src="https://image.tmdb.org/t/p/w500/${e.poster_path}"\n              alt="${t}"\n              loading="lazy"\n            />\n            <div class="info">\n              <p class="movie__title">${e.original_title}</p> <p class="movie__genres">${t}</p>\n            </div>\n          </div>`})).join("");document.querySelector("#main").addEventListener("click",(o=>{if(!o.target.closest(".movie__card"))return;const n=document.createElement("div");n.classList.add("backdrop");const a=o.target.closest(".movie__card").getAttribute("data-id");var r;(r=a,fetch(`https://api.themoviedb.org/3/movie/${r}?api_key=64cb7e9375c055230d64b013c4bca79f`).then((e=>{if(!e.ok)throw 429===e.status?console.error("Error: Too many requests to API."):console.error("Error: Failed to fetch data from API. Status code:",e.status),new Error(e.status);return e.json()})).catch((e=>{throw new Error(e)}))).then((o=>{n.innerHTML=t(o),document.body.appendChild(n);const r=window.scrollY;document.body.style.top=`-${r}px`,document.body.style.position="fixed";const s=document.querySelector("#modal__close"),l=document.getElementById("watched"),c=document.getElementById("queue");l.addEventListener("click",(()=>e(a,"watched"))),c.addEventListener("click",(()=>e(a,"queue"))),s.addEventListener("click",(()=>{l.removeEventListener("click",(()=>e(a,"watched"))),c.removeEventListener("click",e(a,"queue")),document.body.style.position="",document.body.style.top="",window.scrollTo(0,r),document.querySelector(".backdrop").remove(),document.body.classList.remove("overflow-off")}))})).catch((e=>{console.error(e)}))}));document.getElementById("button").addEventListener("click",(()=>{const e=document.getElementById("search").value.trim();n(e).then((e=>{const t=a(e);document.getElementById("main").innerHTML=t;document.querySelectorAll(".movie-card").forEach((e=>{e.addEventListener("click",(()=>{console.log(e)}))}))})).catch((e=>{console.error("Error:",e)}))}));
//# sourceMappingURL=library.1f282f13.js.map
