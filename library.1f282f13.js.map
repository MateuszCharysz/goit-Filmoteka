{"mappings":"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","sources":["src/js/api/fetchMovieById.js","src/js/localStorage/localStorage.js","src/js/modal/modalMarkup.js","src/js/api/fetchMovieGenres.js","src/js/api/fetchMovies.js","src/js/renderListMarkup.js","src/library.js","src/js/modal/openModal.js","src/js/modal/closeModal.js","src/js/searchMovies.js"],"sourcesContent":["const fetchMovieById = id => {\n  const API_KEY = '64cb7e9375c055230d64b013c4bca79f';\n  const API_URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 429) {\n          // Too Many Requests\n          console.error('Error: Too many requests to API.');\n        } else {\n          console.error(\n            'Error: Failed to fetch data from API. Status code:',\n            response.status\n          );\n        }\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(error)\n    });\n};\nexport { fetchMovieById };\n","/*\n    Funkcja addToLocalStorage dodaje identyfikator (id) do listy (listName) \n    przechowywanej w pamięci lokalnej przeglądarki dla zalogowanego użytkownika. \n    Jeśli lista nie istnieje, zostanie utworzona. \n*/\nconst addToLocalStorage = (id, listName) => {\n  let storedList = localStorage.getItem('user');\n  let parsedList = {};\n\n  if (storedList) {\n    parsedList = JSON.parse(storedList);\n  }\n\n  if (!parsedList[listName]) {\n    parsedList[listName] = [];\n  }\n\n  if (!parsedList[listName].includes(id)) {\n    parsedList[listName].push(id);\n  }\n\n  localStorage.setItem('user', JSON.stringify(parsedList));\n};\nexport { addToLocalStorage };\n","const renderModal = e => {\n  const genres = e.genres.map(genre => genre.name).join(', ');\n  const markup = `\n    <div class='modal'>\n        <button class='modal__button modal__button--close' id='modal__close'>\n        </button>\n        <img class=\"modal__img\" src=\"https://image.tmdb.org/t/p/w500//${\n          e.poster_path\n        }\" />\n        <div class=\"modal__content\">\n            <h2 class=\"modal__title\">${e.original_title}</h2>\n            <ul class=\"modal__list\">\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Vote / Votes</p>\n                    <div class=\"modal__item--vote\">\n                        <p class=\"modal__item--value modal__item--value--vote\">\n                            <vote_average>\n                                ${e.vote_average.toFixed(1)}\n                            </vote_average>\n                            /\n                            <vote__count>\n                                ${e.vote_count}\n                            </vote__count>\n                        </p>\n                    </div>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Popularity</p>\n                    <p class=\"modal__item--value\">${e.popularity.toFixed(1)}</p>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Original Title</p>\n                    <p class=\"modal__item--value big\">${e.original_title}</p>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Genre</p>\n                    <p class=\"modal__item--value\">${genres}</p>\n                </li>\n            </ul>\n            <div class=\"modal__overview\">\n                <h3 class=\"modal__overview--about\">ABOUT</h3>\n                <p class=\"modal__overview--overview\">${e.overview}</p>\n            </div>\n        <div class=\"modal__buttons\">\n            <button id=\"watched\" class=\"modal__button modal__button--watched\">Add to watched</button>\n            <button id=\"queue\" class=\"modal__button modal__button--queue\">Add to queue</button>\n        </div>\n    </div>\n    `;\n\n  return markup;\n};\nexport { renderModal };","const fetchMovieGenres = id => {\n  const API_KEY = '64cb7e9375c055230d64b013c4bca79f';\n  const API_URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`;\n\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 429) {\n          // Too Many Requests\n          console.error('Error: Too many requests to API.');\n        } else {\n          console.error(\n            'Error: Failed to fetch data from API. Status code:',\n            response.status\n          );\n        }\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n    .then(data => {\n      return data.genres;\n    })\n    .catch(error => {\n      throw new Error(error);\n    });\n};\n\nexport { fetchMovieGenres };\n","import { fetchMovieGenres } from './fetchMovieGenres';\n\nconst fetchMovies = name => {\n  const API_KEY = '64cb7e9375c055230d64b013c4bca79f';\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${name}&page=1&include_adult=false`;\n\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 429) {\n          // Too Many Requests\n          console.error('Error: Too many requests to API.');\n        } else {\n          console.error(\n            'Error: Failed to fetch data from API. Status code:',\n            response.status\n          );\n        }\n        return Promise.reject(new Error(response.status));\n      }\n      return response.json();\n    })\n    .then(data => {\n      const movieIds = data.results.map(movie => movie.id);\n      const promises = movieIds.map(id => fetchMovieGenres(id));\n      return Promise.all(promises).then(genres => {\n        return data.results.map((movie, index) => ({\n          ...movie,\n          genres: genres[index],\n        }));\n      });\n    })\n    .catch(error => {\n      console.error(error);\n      return Promise.reject(\n        new Error('An error occurred while fetching the data.')\n      );\n    });\n};\nexport { fetchMovies };\n","const renderList = movies => {\n  const markup = movies\n    .map(movie => {\n      const tags = movie.genres.map(genre => genre.name).join(', ');\n      return `<div class=\"movie__card\" data-id=\"${movie.id}\">\n            <img\n              src=\"https://image.tmdb.org/t/p/w500/${movie.poster_path}\"\n              alt=\"${tags}\"\n              loading=\"lazy\"\n            />\n            <div class=\"info\">\n              <p class=\"movie__title\">${movie.original_title}</p> <p class=\"movie__genres\">${tags}</p>\n            </div>\n          </div>`;\n    })\n    .join('');\n\n  return markup;\n};\nexport { renderList };\n","import { openModal } from './js/modal/openModal';\nimport { searchMovies } from './js/searchMovies';\nimport './sass/main.scss';\n\nconst mainContent = document.querySelector('#main');\n// openModal => fetchMovieById => modalMarkup\nmainContent.addEventListener('click', openModal);\n\nconst button = document.getElementById('button');\n// searchMovies => fetchMovies => renderListMarkup\nbutton.addEventListener('click', searchMovies);","import { fetchMovieById } from '../api/fetchMovieById';\nimport { addToLocalStorage } from '../localStorage/localStorage';\nimport { closeModal } from './closeModal';\nimport { renderModal } from './modalMarkup';\n\n// funkcja otwierająca modal\nconst openModal = e => {\n  // przerywa funkcję, jeśli zdarzenie nie występuje na elemencie z klasą \"movie-card\".\n  if (!e.target.closest('.movie__card')) {\n    return;\n  }\n  const backdrop = document.createElement('div');\n  backdrop.classList.add('backdrop');\n\n  // pobranie id filmu z atrybutu \"data-id\" klikniętego elementu\n  const movieId = e.target.closest('.movie__card').getAttribute('data-id');\n  fetchMovieById(movieId)\n    .then(movieData => {\n      backdrop.innerHTML = renderModal(movieData);\n\n      // dodanie elementu backdrop do ciała dokumentu\n      document.body.appendChild(backdrop);\n\n      // blokowanie scrollowania strony\n      const currentScrollY = window.scrollY;\n      document.body.style.top = `-${currentScrollY}px`;\n      document.body.style.position = 'fixed';\n\n      const closeModalButton = document.querySelector('#modal__close');\n      const watchedButton = document.getElementById('watched');\n      const queueButton = document.getElementById('queue');\n\n      watchedButton.addEventListener('click', () =>\n        addToLocalStorage(movieId, 'watched')\n      );\n      queueButton.addEventListener('click', () =>\n        addToLocalStorage(movieId, 'queue')\n      );\n      closeModalButton.addEventListener('click', () => {\n        // usuwanie nasłuchiwaczy zdarzeń\n        watchedButton.removeEventListener('click', () =>\n          addToLocalStorage(movieId, 'watched')\n        );\n        queueButton.removeEventListener(\n          'click',\n          addToLocalStorage(movieId, 'queue')\n        );\n        // odblokowanie scrollowania strony\n        document.body.style.position = '';\n        document.body.style.top = '';\n        window.scrollTo(0, currentScrollY);\n        closeModal();\n      });\n    })\n    .catch(error => {\n      console.error(error);\n    });\n};\n\nexport { openModal };\n","// funkcja zamykająca modal\nconst closeModal = () => {\n  const backdrop = document.querySelector('.backdrop');\n  backdrop.remove();\n  // usuwamy klasę blokującą możliwość skrolowania\n  document.body.classList.remove('overflow-off');\n};\n\nexport { closeModal };\n","import { fetchMovies } from './api/fetchMovies';\nimport { renderList } from './renderListMarkup';\n\n// Wyszukuje filmy po wpisaniu w wyszukiwarce\n\nconst searchMovies = () => {\n  const searchInput = document.getElementById('search');\n  const searchValue = searchInput.value.trim();\n\n  fetchMovies(searchValue)\n    .then(movies => {\n      const markup = renderList(movies);\n      document.getElementById('main').innerHTML = markup;\n\n      // wywołanie funkcji `openModal` z odpowiednimi argumentami po utworzeniu elementów z wynikami wyszukiwania.\n      const movieCards = document.querySelectorAll('.movie-card');\n      movieCards.forEach(movieCard => {\n        movieCard.addEventListener('click', () => {\n          // Pobierz dane filmu z atrybutów `data-*` klikniętego elementu `.movie-card`.\n          console.log(movieCard);\n        });\n      });\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      // Tutaj możesz wyświetlić informację o błędzie w interfejsie użytkownika\n    });\n};\n\n\nexport { searchMovies };\n"],"names":["$a44aee608a77035f$export$b4aebac53294aa19","id","listName","storedList","localStorage","getItem","parsedList","JSON","parse","includes","push","setItem","stringify","$fad5686dca371532$export$69bf191433722f78","e","genres","map","genre","name","join","poster_path","original_title","vote_average","toFixed","vote_count","popularity","overview","$44313975d9150039$export$8bebce24411c8fc2","fetch","then","response","ok","status","console","error","Error","json","data","catch","$c2cee0d19eea503f$export$88181abcadffafee","Promise","reject","promises","results","movie","all","index","$fee5b1c7c933a4bc$export$4bf387f59bfc6d67","movies","tags","document","querySelector","addEventListener","target","closest","backdrop","createElement","classList","add","movieId","getAttribute","movieData","innerHTML","body","appendChild","currentScrollY","window","scrollY","style","top","position","closeModalButton","watchedButton","getElementById","queueButton","removeEventListener","scrollTo","remove","searchValue","value","trim","markup","querySelectorAll","forEach","movieCard","log"],"version":3,"file":"library.1f282f13.js.map"}