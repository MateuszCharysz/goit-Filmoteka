{"mappings":"YAAA,ICKMA,EAAoB,SAACC,EAAIC,GAC7B,IAAIC,EAAaC,aAAaC,QAAQ,QAClCC,EAAa,GAEbH,IACFG,EAAaC,KAAKC,MAAML,IAGrBG,EAAWJ,KACdI,EAAWJ,GAAY,IAGpBI,EAAWJ,GAAUO,SAASR,IACjCK,EAAWJ,GAAUQ,KAAKT,GAG5BG,aAAaO,QAAQ,OAAQJ,KAAKK,UAAUN,G,ECrBxCO,EAAc,SAAAC,GAClB,IAAMC,EAASD,EAAEC,OAAOC,KAAI,SAAAC,G,OAASA,EAAMC,I,IAAMC,KAAK,MAiDtD,MAhDe,yMAQsBC,OAH7BN,EAAEO,YACH,qFASyBD,OAPKN,EAAEQ,eAAe,iXAWtBF,OAJAN,EAAES,aAAaC,QAAQ,GAAG,6JAWRJ,OAPlBN,EAAEW,WAAW,iSAWSL,OAJJN,EAAEY,WAAWF,QAAQ,GAAG,uMAQxBJ,OAJIN,EAAEQ,eAAe,0LASlBF,OALHL,EAAO,mNAKOK,OAAXN,EAAEa,SAAS,2S,ECzCrDC,EAAWC,SAASC,cAAc,QACzBD,SAASC,cAAc,WCK7CF,EAASG,iBAAiB,SCAR,SAAAjB,GAEZ,GAACA,EAAEkB,OAAOC,QAAQ,gBAAlB,CAGJ,IAAMC,EAAWL,SAASM,cAAc,OACxCD,EAASE,UAAUC,IAAI,YAGtB,ILfoBpC,EAEfqC,EKaAC,EAAUzB,EAAEkB,OAAOC,QAAQ,gBAAgBO,aAAa,YLfzCvC,EKgBNsC,ELdTD,EAAU,sCAAoDlB,OAAdnB,EAAG,aAAmBmB,OAD5D,oCAGTqB,MAAMH,GACVI,MAAK,SAAAC,GACJ,IAAKA,EAASC,GAUZ,MATwB,MAApBD,EAASE,OAEXC,QAAQC,MAAM,oCAEdD,QAAQC,MACN,qDACAJ,EAASE,QAGP,IAAIG,MAAML,EAASE,QAE3B,OAAOF,EAASM,M,IAEjBC,OAAM,SAAAH,GACL,MAAM,IAAIC,MAAMD,E,KKJjBL,MAAK,SAAAS,GACJjB,EAASkB,UAAYvC,EAAYsC,GAGhCtB,SAAQwB,KAAKC,YAAYpB,GAG1B,IAAMqB,EAAiBC,OAAOC,QAC9B5B,SAASwB,KAAKK,MAAMC,IAAM,IAAmBvC,OAAfmC,EAAe,MAC7C1B,SAASwB,KAAKK,MAAME,SAAW,QAE/B,IAAMC,EAAmBhC,SAASC,cAAc,iBAC1CgC,EAAgBjC,SAASkC,eAAe,WACxCC,EAAcnC,SAASkC,eAAe,SAE5CD,EAAc/B,iBAAiB,SAAS,W,OACtC/B,EAAkBuC,EAAS,U,IAE7ByB,EAAYjC,iBAAiB,SAAS,W,OACpC/B,EAAkBuC,EAAS,Q,IAE7BsB,EAAiB9B,iBAAiB,SAAS,WAEzC+B,EAAcG,oBAAoB,SAAS,W,OACzCjE,EAAkBuC,EAAS,U,IAE7ByB,EAAYC,oBACV,QACAjE,EAAkBuC,EAAS,UAG7BV,SAASwB,KAAKK,MAAME,SAAW,GAC/B/B,SAASwB,KAAKK,MAAMC,IAAM,GAC1BH,OAAOU,SAAS,EAAGX,GChDR1B,SAASC,cAAc,aAC/BqC,SAETtC,SAASwB,KAAKjB,UAAU+B,OAAO,e,ODiD5BjB,OAAM,SAAAH,GACLD,QAAQC,MAAMA,E,GA9ChB,C","sources":["src/js/api/fetchMovieById.js","src/js/localStorage/localStorage.js","src/js/modal/modalMarkup.js","src/js/gallery/galleryVariables.js","src/library.js","src/js/modal/openModal.js","src/js/modal/closeModal.js"],"sourcesContent":["const fetchMovieById = id => {\n  const API_KEY = '64cb7e9375c055230d64b013c4bca79f';\n  const API_URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        if (response.status === 429) {\n          // Too Many Requests\n          console.error('Error: Too many requests to API.');\n        } else {\n          console.error(\n            'Error: Failed to fetch data from API. Status code:',\n            response.status\n          );\n        }\n        throw new Error(response.status);\n      }\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(error)\n    });\n};\nexport { fetchMovieById };\n","/*\n    Funkcja addToLocalStorage dodaje identyfikator (id) do listy (listName) \n    przechowywanej w pamięci lokalnej przeglądarki dla zalogowanego użytkownika. \n    Jeśli lista nie istnieje, zostanie utworzona. \n*/\nconst addToLocalStorage = (id, listName) => {\n  let storedList = localStorage.getItem('user');\n  let parsedList = {};\n\n  if (storedList) {\n    parsedList = JSON.parse(storedList);\n  }\n\n  if (!parsedList[listName]) {\n    parsedList[listName] = [];\n  }\n\n  if (!parsedList[listName].includes(id)) {\n    parsedList[listName].push(id);\n  }\n\n  localStorage.setItem('user', JSON.stringify(parsedList));\n};\nexport { addToLocalStorage };\n","const renderModal = e => {\n  const genres = e.genres.map(genre => genre.name).join(', ');\n  const markup = `\n    <div class='modal'>\n        <button class='modal__button modal__button--close' id='modal__close'>\n        </button>\n        <img class=\"modal__img\" src=\"https://image.tmdb.org/t/p/w500//${\n          e.poster_path\n        }\" />\n        <div class=\"modal__content\">\n            <h2 class=\"modal__title\">${e.original_title}</h2>\n            <ul class=\"modal__list\">\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Vote / Votes</p>\n                    <div class=\"modal__item--vote\">\n                        <p class=\"modal__item--value modal__item--value--vote\">\n                            <vote_average>\n                                ${e.vote_average.toFixed(1)}\n                            </vote_average>\n                            /\n                            <vote__count>\n                                ${e.vote_count}\n                            </vote__count>\n                        </p>\n                    </div>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Popularity</p>\n                    <p class=\"modal__item--value\">${e.popularity.toFixed(1)}</p>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Original Title</p>\n                    <p class=\"modal__item--value big\">${e.original_title}</p>\n                </li>\n                <li class=\"modal__item\">\n                    <p class=\"modal__item--label\">Genre</p>\n                    <p class=\"modal__item--value\">${genres}</p>\n                </li>\n            </ul>\n            <div class=\"modal__overview\">\n                <h3 class=\"modal__overview--about\">ABOUT</h3>\n                <p class=\"modal__overview--overview\">${e.overview}</p>\n            </div>\n        <div class=\"modal__buttons\">\n            <button id=\"watched\" class=\"modal__button modal__button--watched\">Add to watched</button>\n            <button id=\"queue\" class=\"modal__button modal__button--queue\">Add to queue</button>\n        </div>\n    </div>\n    `;\n\n  return markup;\n};\nexport { renderModal };","export const movieBox = document.querySelector('.box');\nexport const loader = document.querySelector('.loader');\nexport let movieID = [];\nexport let movieDetails = [];\nexport const cbClear = () => {\n  movieID.length = 0;\n  movieDetails.length = 0;\n  movieBox.innerHTML = '';\n};\n","import { openModal } from './js/modal/openModal';\nimport { movieBox } from './js/gallery/galleryVariables';\n// import { searchMovies } from './js/searchMovies';\nimport './sass/main.scss';\n\n// openModal => fetchMovieById => modalMarkup\nmovieBox.addEventListener('click', openModal);\n\n","import { fetchMovieById } from '../api/fetchMovieById';\nimport { addToLocalStorage } from '../localStorage/localStorage';\nimport { closeModal } from './closeModal';\nimport { renderModal } from './modalMarkup';\n\n// funkcja otwierająca modal\nconst openModal = e => {\n  // przerywa funkcję, jeśli zdarzenie nie występuje na elemencie z klasą \"movie-card\".\n  if (!e.target.closest('.movie__card')) {\n    return;\n  }\n  const backdrop = document.createElement('div');\n  backdrop.classList.add('backdrop');\n\n  // pobranie id filmu z atrybutu \"data-id\" klikniętego elementu\n  const movieId = e.target.closest('.movie__card').getAttribute('data-id');\n  fetchMovieById(movieId)\n    .then(movieData => {\n      backdrop.innerHTML = renderModal(movieData);\n\n      // dodanie elementu backdrop do ciała dokumentu\n      document.body.appendChild(backdrop);\n\n      // blokowanie scrollowania strony\n      const currentScrollY = window.scrollY;\n      document.body.style.top = `-${currentScrollY}px`;\n      document.body.style.position = 'fixed';\n\n      const closeModalButton = document.querySelector('#modal__close');\n      const watchedButton = document.getElementById('watched');\n      const queueButton = document.getElementById('queue');\n\n      watchedButton.addEventListener('click', () =>\n        addToLocalStorage(movieId, 'watched')\n      );\n      queueButton.addEventListener('click', () =>\n        addToLocalStorage(movieId, 'queue')\n      );\n      closeModalButton.addEventListener('click', () => {\n        // usuwanie nasłuchiwaczy zdarzeń\n        watchedButton.removeEventListener('click', () =>\n          addToLocalStorage(movieId, 'watched')\n        );\n        queueButton.removeEventListener(\n          'click',\n          addToLocalStorage(movieId, 'queue')\n        );\n        // odblokowanie scrollowania strony\n        document.body.style.position = '';\n        document.body.style.top = '';\n        window.scrollTo(0, currentScrollY);\n        closeModal();\n      });\n    })\n    .catch(error => {\n      console.error(error);\n    });\n};\n\nexport { openModal };\n","// funkcja zamykająca modal\nconst closeModal = () => {\n  const backdrop = document.querySelector('.backdrop');\n  backdrop.remove();\n  // usuwamy klasę blokującą możliwość skrolowania\n  document.body.classList.remove('overflow-off');\n};\n\nexport { closeModal };\n"],"names":["$603ee17184359926$export$b4aebac53294aa19","id","listName","storedList","localStorage","getItem","parsedList","JSON","parse","includes","push","setItem","stringify","$a319137e6235f254$export$69bf191433722f78","e","genres","map","genre","name","join","concat","poster_path","original_title","vote_average","toFixed","vote_count","popularity","overview","$b6c9f472d2b4aa59$export$3bb5b193866863e3","document","querySelector","addEventListener","target","closest","backdrop","createElement","classList","add","API_URL","movieId","getAttribute","fetch","then","response","ok","status","console","error","Error","json","catch","movieData","innerHTML","body","appendChild","currentScrollY","window","scrollY","style","top","position","closeModalButton","watchedButton","getElementById","queueButton","removeEventListener","scrollTo","remove"],"version":3,"file":"library.cbe0efa1.js.map"}